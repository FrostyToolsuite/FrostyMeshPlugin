using System.IO;
using System.Text;
using System.Text.Json;
using System.Text.Json.Serialization;
using Frosty.Sdk.IO;
using Frosty.Sdk.Utils;

namespace FrostyMeshPlugin.Gltf;

public class Glb
{
    public static void Write(string inPath, AutoGenerated.Gltf inGltf, Block<byte>? inBuffer)
    {
        // serialize to json
        string json = JsonSerializer.Serialize(inGltf,
            new JsonSerializerOptions() { DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull });
        byte[] bytes = Encoding.UTF8.GetBytes(json);

        uint jsonLength = (uint)bytes.Length + 3u & ~3u;
        uint bufferLength = (uint)(inBuffer?.Size ?? 0) + 3u & ~3u;
        
        using (DataStream stream = new(File.Create(inPath)))
        {
            // -- Header --
            // magic
            stream.WriteUInt32(0x46546C67);
            // version
            stream.WriteUInt32(2);
            // length
            stream.WriteUInt32(12 + 8 + jsonLength + (inBuffer is not null ? 8 + bufferLength : 0));

            // -- Chunk 0 --
            // chunkLength
            stream.WriteUInt32(jsonLength);
            // chunkType
            stream.WriteUInt32(0x4E4F534A);
            // chunkData
            stream.Write(bytes);
            // pad with space(0x20)
            while (stream.Position % 4 != 0)
            {
                stream.WriteChar(' ');
            }

            if (inBuffer is null)
            {
                return;
            }

            // -- Chunks 1 --
            // chunkLength
            stream.WriteUInt32(bufferLength);
            // chunkType
            stream.WriteUInt32(0x004E4942);
            // chunkData
            stream.Write(inBuffer);
            // pad with 0x00
            while (stream.Position % 4 != 0)
            {
                stream.WriteByte(0x00);
            }
        }
    }
}