//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    
    
    [System.Text.Json.Serialization.JsonConverter(typeof(CameraPerspectiveConverter))]
    public class CameraPerspective {
        
        /// <summary>
        /// Backing field for AspectRatio.
        /// </summary>
        private System.Nullable<float> m_aspectRatio;
        
        /// <summary>
        /// Backing field for Yfov.
        /// </summary>
        private float m_yfov;
        
        /// <summary>
        /// Backing field for Zfar.
        /// </summary>
        private System.Nullable<float> m_zfar;
        
        /// <summary>
        /// Backing field for Znear.
        /// </summary>
        private float m_znear;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;
        
        /// <summary>
        /// The floating-point aspect ratio of the field of view.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("aspectRatio")]
        public System.Nullable<float> AspectRatio {
            get {
                return this.m_aspectRatio;
            }
            set {
                if ((value <= 0D)) {
                    throw new System.ArgumentOutOfRangeException("AspectRatio", value, "Expected value to be greater than 0");
                }
                this.m_aspectRatio = value;
            }
        }
        
        /// <summary>
        /// The floating-point vertical field of view in radians. This value **SHOULD** be less than Ï€.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("yfov")]
        public float Yfov {
            get {
                return this.m_yfov;
            }
            set {
                if ((value <= 0D)) {
                    throw new System.ArgumentOutOfRangeException("Yfov", value, "Expected value to be greater than 0");
                }
                this.m_yfov = value;
            }
        }
        
        /// <summary>
        /// The floating-point distance to the far clipping plane.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("zfar")]
        public System.Nullable<float> Zfar {
            get {
                return this.m_zfar;
            }
            set {
                if ((value <= 0D)) {
                    throw new System.ArgumentOutOfRangeException("Zfar", value, "Expected value to be greater than 0");
                }
                this.m_zfar = value;
            }
        }
        
        /// <summary>
        /// The floating-point distance to the near clipping plane.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("znear")]
        public float Znear {
            get {
                return this.m_znear;
            }
            set {
                if ((value <= 0D)) {
                    throw new System.ArgumentOutOfRangeException("Znear", value, "Expected value to be greater than 0");
                }
                this.m_znear = value;
            }
        }
        
        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }
        
        public bool ShouldSerializeAspectRatio() {
            return ((m_aspectRatio == null) 
                        == false);
        }
        
        public bool ShouldSerializeZfar() {
            return ((m_zfar == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((m_extras == null) 
                        == false);
        }
        
        public class CameraPerspectiveConverter : JsonConverter<CameraPerspective> {
            
            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(CameraPerspective) == typeToConvert);
            }
            
            public override CameraPerspective Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                CameraPerspective foo = new CameraPerspective();
                for (
                ; true; 
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "aspectRatio")) {
                            foo.AspectRatio = System.Text.Json.JsonSerializer.Deserialize<System.Nullable<float>>(ref reader, options);
                        }
                        if ((propertyName == "yfov")) {
                            foo.Yfov = System.Text.Json.JsonSerializer.Deserialize<float>(ref reader, options);
                        }
                        if ((propertyName == "zfar")) {
                            foo.Zfar = System.Text.Json.JsonSerializer.Deserialize<System.Nullable<float>>(ref reader, options);
                        }
                        if ((propertyName == "znear")) {
                            foo.Znear = System.Text.Json.JsonSerializer.Deserialize<float>(ref reader, options);
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }
            
            public override void Write(System.Text.Json.Utf8JsonWriter writer, CameraPerspective value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                if (value.ShouldSerializeAspectRatio()) {
                    writer.WritePropertyName("aspectRatio");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.AspectRatio, options);
                }
                writer.WritePropertyName("yfov");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Yfov, options);
                if (value.ShouldSerializeZfar()) {
                    writer.WritePropertyName("zfar");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Zfar, options);
                }
                writer.WritePropertyName("znear");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Znear, options);
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
