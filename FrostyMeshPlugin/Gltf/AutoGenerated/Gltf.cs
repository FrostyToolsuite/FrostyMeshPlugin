//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    
    
    [System.Text.Json.Serialization.JsonConverter(typeof(GltfConverter))]
    public class Gltf {
        
        /// <summary>
        /// Backing field for ExtensionsUsed.
        /// </summary>
        private System.Collections.Generic.List<string> m_extensionsUsed;
        
        /// <summary>
        /// Backing field for ExtensionsRequired.
        /// </summary>
        private System.Collections.Generic.List<string> m_extensionsRequired;
        
        /// <summary>
        /// Backing field for Accessors.
        /// </summary>
        private List<Accessor> m_accessors;
        
        /// <summary>
        /// Backing field for Animations.
        /// </summary>
        private List<Animation> m_animations;
        
        /// <summary>
        /// Backing field for Asset.
        /// </summary>
        private Asset m_asset;
        
        /// <summary>
        /// Backing field for Buffers.
        /// </summary>
        private List<Buffer> m_buffers;
        
        /// <summary>
        /// Backing field for BufferViews.
        /// </summary>
        private List<BufferView> m_bufferViews;
        
        /// <summary>
        /// Backing field for Cameras.
        /// </summary>
        private List<Camera> m_cameras;
        
        /// <summary>
        /// Backing field for Images.
        /// </summary>
        private List<Image> m_images;
        
        /// <summary>
        /// Backing field for Materials.
        /// </summary>
        private List<Material> m_materials;
        
        /// <summary>
        /// Backing field for Meshes.
        /// </summary>
        private List<Mesh> m_meshes;
        
        /// <summary>
        /// Backing field for Nodes.
        /// </summary>
        private List<Node> m_nodes;
        
        /// <summary>
        /// Backing field for Samplers.
        /// </summary>
        private List<Sampler> m_samplers;
        
        /// <summary>
        /// Backing field for Scene.
        /// </summary>
        private System.Nullable<int> m_scene;
        
        /// <summary>
        /// Backing field for Scenes.
        /// </summary>
        private List<Scene> m_scenes;
        
        /// <summary>
        /// Backing field for Skins.
        /// </summary>
        private List<Skin> m_skins;
        
        /// <summary>
        /// Backing field for Textures.
        /// </summary>
        private List<Texture> m_textures;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;
        
        /// <summary>
        /// Names of glTF extensions used in this asset.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensionsUsed")]
        public System.Collections.Generic.List<string> ExtensionsUsed {
            get {
                return this.m_extensionsUsed;
            }
            set {
                if ((value == null)) {
                    this.m_extensionsUsed = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_extensionsUsed = value;
            }
        }
        
        /// <summary>
        /// Names of glTF extensions required to properly load this asset.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensionsRequired")]
        public System.Collections.Generic.List<string> ExtensionsRequired {
            get {
                return this.m_extensionsRequired;
            }
            set {
                if ((value == null)) {
                    this.m_extensionsRequired = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_extensionsRequired = value;
            }
        }
        
        /// <summary>
        /// An array of accessors.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("accessors")]
        public List<Accessor> Accessors {
            get {
                return this.m_accessors;
            }
            set {
                if ((value == null)) {
                    this.m_accessors = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_accessors = value;
            }
        }
        
        /// <summary>
        /// An array of keyframe animations.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("animations")]
        public List<Animation> Animations {
            get {
                return this.m_animations;
            }
            set {
                if ((value == null)) {
                    this.m_animations = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_animations = value;
            }
        }
        
        /// <summary>
        /// Metadata about the glTF asset.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("asset")]
        public Asset Asset {
            get {
                return this.m_asset;
            }
            set {
                this.m_asset = value;
            }
        }
        
        /// <summary>
        /// An array of buffers.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("buffers")]
        public List<Buffer> Buffers {
            get {
                return this.m_buffers;
            }
            set {
                if ((value == null)) {
                    this.m_buffers = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_buffers = value;
            }
        }
        
        /// <summary>
        /// An array of bufferViews.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bufferViews")]
        public List<BufferView> BufferViews {
            get {
                return this.m_bufferViews;
            }
            set {
                if ((value == null)) {
                    this.m_bufferViews = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_bufferViews = value;
            }
        }
        
        /// <summary>
        /// An array of cameras.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("cameras")]
        public List<Camera> Cameras {
            get {
                return this.m_cameras;
            }
            set {
                if ((value == null)) {
                    this.m_cameras = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_cameras = value;
            }
        }
        
        /// <summary>
        /// An array of images.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("images")]
        public List<Image> Images {
            get {
                return this.m_images;
            }
            set {
                if ((value == null)) {
                    this.m_images = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_images = value;
            }
        }
        
        /// <summary>
        /// An array of materials.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("materials")]
        public List<Material> Materials {
            get {
                return this.m_materials;
            }
            set {
                if ((value == null)) {
                    this.m_materials = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_materials = value;
            }
        }
        
        /// <summary>
        /// An array of meshes.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("meshes")]
        public List<Mesh> Meshes {
            get {
                return this.m_meshes;
            }
            set {
                if ((value == null)) {
                    this.m_meshes = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_meshes = value;
            }
        }
        
        /// <summary>
        /// An array of nodes.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("nodes")]
        public List<Node> Nodes {
            get {
                return this.m_nodes;
            }
            set {
                if ((value == null)) {
                    this.m_nodes = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_nodes = value;
            }
        }
        
        /// <summary>
        /// An array of samplers.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("samplers")]
        public List<Sampler> Samplers {
            get {
                return this.m_samplers;
            }
            set {
                if ((value == null)) {
                    this.m_samplers = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_samplers = value;
            }
        }
        
        /// <summary>
        /// The index of the default scene.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("scene")]
        public System.Nullable<int> Scene {
            get {
                return this.m_scene;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Scene", value, "Expected value to be greater than or equal to 0");
                }
                this.m_scene = value;
            }
        }
        
        /// <summary>
        /// An array of scenes.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("scenes")]
        public List<Scene> Scenes {
            get {
                return this.m_scenes;
            }
            set {
                if ((value == null)) {
                    this.m_scenes = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_scenes = value;
            }
        }
        
        /// <summary>
        /// An array of skins.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("skins")]
        public List<Skin> Skins {
            get {
                return this.m_skins;
            }
            set {
                if ((value == null)) {
                    this.m_skins = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_skins = value;
            }
        }
        
        /// <summary>
        /// An array of textures.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("textures")]
        public List<Texture> Textures {
            get {
                return this.m_textures;
            }
            set {
                if ((value == null)) {
                    this.m_textures = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                this.m_textures = value;
            }
        }
        
        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }
        
        public bool ShouldSerializeExtensionsUsed() {
            return ((m_extensionsUsed == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensionsRequired() {
            return ((m_extensionsRequired == null) 
                        == false);
        }
        
        public bool ShouldSerializeAccessors() {
            return ((m_accessors == null) 
                        == false);
        }
        
        public bool ShouldSerializeAnimations() {
            return ((m_animations == null) 
                        == false);
        }
        
        public bool ShouldSerializeAsset() {
            return ((m_asset == null) 
                        == false);
        }
        
        public bool ShouldSerializeBuffers() {
            return ((m_buffers == null) 
                        == false);
        }
        
        public bool ShouldSerializeBufferViews() {
            return ((m_bufferViews == null) 
                        == false);
        }
        
        public bool ShouldSerializeCameras() {
            return ((m_cameras == null) 
                        == false);
        }
        
        public bool ShouldSerializeImages() {
            return ((m_images == null) 
                        == false);
        }
        
        public bool ShouldSerializeMaterials() {
            return ((m_materials == null) 
                        == false);
        }
        
        public bool ShouldSerializeMeshes() {
            return ((m_meshes == null) 
                        == false);
        }
        
        public bool ShouldSerializeNodes() {
            return ((m_nodes == null) 
                        == false);
        }
        
        public bool ShouldSerializeSamplers() {
            return ((m_samplers == null) 
                        == false);
        }
        
        public bool ShouldSerializeScene() {
            return ((m_scene == null) 
                        == false);
        }
        
        public bool ShouldSerializeScenes() {
            return ((m_scenes == null) 
                        == false);
        }
        
        public bool ShouldSerializeSkins() {
            return ((m_skins == null) 
                        == false);
        }
        
        public bool ShouldSerializeTextures() {
            return ((m_textures == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((m_extras == null) 
                        == false);
        }
        
        public class GltfConverter : JsonConverter<Gltf> {
            
            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(Gltf) == typeToConvert);
            }
            
            public override Gltf Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                Gltf foo = new Gltf();
                for (
                ; true; 
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "extensionsUsed")) {
                            foo.ExtensionsUsed = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.List<string>>(ref reader, options);
                        }
                        if ((propertyName == "extensionsRequired")) {
                            foo.ExtensionsRequired = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.List<string>>(ref reader, options);
                        }
                        if ((propertyName == "accessors")) {
                            foo.Accessors = System.Text.Json.JsonSerializer.Deserialize<List<Accessor>>(ref reader, options);
                        }
                        if ((propertyName == "animations")) {
                            foo.Animations = System.Text.Json.JsonSerializer.Deserialize<List<Animation>>(ref reader, options);
                        }
                        if ((propertyName == "asset")) {
                            foo.Asset = System.Text.Json.JsonSerializer.Deserialize<Asset>(ref reader, options);
                        }
                        if ((propertyName == "buffers")) {
                            foo.Buffers = System.Text.Json.JsonSerializer.Deserialize<List<Buffer>>(ref reader, options);
                        }
                        if ((propertyName == "bufferViews")) {
                            foo.BufferViews = System.Text.Json.JsonSerializer.Deserialize<List<BufferView>>(ref reader, options);
                        }
                        if ((propertyName == "cameras")) {
                            foo.Cameras = System.Text.Json.JsonSerializer.Deserialize<List<Camera>>(ref reader, options);
                        }
                        if ((propertyName == "images")) {
                            foo.Images = System.Text.Json.JsonSerializer.Deserialize<List<Image>>(ref reader, options);
                        }
                        if ((propertyName == "materials")) {
                            foo.Materials = System.Text.Json.JsonSerializer.Deserialize<List<Material>>(ref reader, options);
                        }
                        if ((propertyName == "meshes")) {
                            foo.Meshes = System.Text.Json.JsonSerializer.Deserialize<List<Mesh>>(ref reader, options);
                        }
                        if ((propertyName == "nodes")) {
                            foo.Nodes = System.Text.Json.JsonSerializer.Deserialize<List<Node>>(ref reader, options);
                        }
                        if ((propertyName == "samplers")) {
                            foo.Samplers = System.Text.Json.JsonSerializer.Deserialize<List<Sampler>>(ref reader, options);
                        }
                        if ((propertyName == "scene")) {
                            foo.Scene = System.Text.Json.JsonSerializer.Deserialize<System.Nullable<int>>(ref reader, options);
                        }
                        if ((propertyName == "scenes")) {
                            foo.Scenes = System.Text.Json.JsonSerializer.Deserialize<List<Scene>>(ref reader, options);
                        }
                        if ((propertyName == "skins")) {
                            foo.Skins = System.Text.Json.JsonSerializer.Deserialize<List<Skin>>(ref reader, options);
                        }
                        if ((propertyName == "textures")) {
                            foo.Textures = System.Text.Json.JsonSerializer.Deserialize<List<Texture>>(ref reader, options);
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }
            
            public override void Write(System.Text.Json.Utf8JsonWriter writer, Gltf value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                if (value.ShouldSerializeExtensionsUsed()) {
                    writer.WritePropertyName("extensionsUsed");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.ExtensionsUsed, options);
                }
                if (value.ShouldSerializeExtensionsRequired()) {
                    writer.WritePropertyName("extensionsRequired");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.ExtensionsRequired, options);
                }
                if (value.ShouldSerializeAccessors()) {
                    writer.WritePropertyName("accessors");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Accessors, options);
                }
                if (value.ShouldSerializeAnimations()) {
                    writer.WritePropertyName("animations");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Animations, options);
                }
                writer.WritePropertyName("asset");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Asset, options);
                if (value.ShouldSerializeBuffers()) {
                    writer.WritePropertyName("buffers");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Buffers, options);
                }
                if (value.ShouldSerializeBufferViews()) {
                    writer.WritePropertyName("bufferViews");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.BufferViews, options);
                }
                if (value.ShouldSerializeCameras()) {
                    writer.WritePropertyName("cameras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Cameras, options);
                }
                if (value.ShouldSerializeImages()) {
                    writer.WritePropertyName("images");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Images, options);
                }
                if (value.ShouldSerializeMaterials()) {
                    writer.WritePropertyName("materials");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Materials, options);
                }
                if (value.ShouldSerializeMeshes()) {
                    writer.WritePropertyName("meshes");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Meshes, options);
                }
                if (value.ShouldSerializeNodes()) {
                    writer.WritePropertyName("nodes");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Nodes, options);
                }
                if (value.ShouldSerializeSamplers()) {
                    writer.WritePropertyName("samplers");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Samplers, options);
                }
                if (value.ShouldSerializeScene()) {
                    writer.WritePropertyName("scene");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Scene, options);
                }
                if (value.ShouldSerializeScenes()) {
                    writer.WritePropertyName("scenes");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Scenes, options);
                }
                if (value.ShouldSerializeSkins()) {
                    writer.WritePropertyName("skins");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Skins, options);
                }
                if (value.ShouldSerializeTextures()) {
                    writer.WritePropertyName("textures");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Textures, options);
                }
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
