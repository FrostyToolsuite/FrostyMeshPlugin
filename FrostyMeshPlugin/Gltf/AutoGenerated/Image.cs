//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;


    [System.Text.Json.Serialization.JsonConverter(typeof(ImageConverter))]
    public class Image {

        /// <summary>
        /// Backing field for Uri.
        /// </summary>
        private string m_uri;

        /// <summary>
        /// Backing field for MimeType.
        /// </summary>
        private System.Nullable<MimeTypeEnum> m_mimeType;

        /// <summary>
        /// Backing field for BufferView.
        /// </summary>
        private System.Nullable<int> m_bufferView;

        /// <summary>
        /// Backing field for Name.
        /// </summary>
        private string m_name;

        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;

        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;

        /// <summary>
        /// The URI (or IRI) of the image.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("uri")]
        public string Uri {
            get {
                return this.m_uri;
            }
            set {
                this.m_uri = value;
            }
        }

        /// <summary>
        /// The image's media type. This field **MUST** be defined when `bufferView` is defined.
        /// </summary>
        [System.Text.Json.Serialization.JsonConverterAttribute(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("mimeType")]
        public System.Nullable<MimeTypeEnum> MimeType {
            get {
                return this.m_mimeType;
            }
            set {
                this.m_mimeType = value;
            }
        }

        /// <summary>
        /// The index of the bufferView that contains the image. This field **MUST NOT** be defined when `uri` is defined.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bufferView")]
        public System.Nullable<int> BufferView {
            get {
                return this.m_bufferView;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("BufferView", value, "Expected value to be greater than or equal to 0");
                }
                this.m_bufferView = value;
            }
        }

        /// <summary>
        /// The user-defined name of this object.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public string Name {
            get {
                return this.m_name;
            }
            set {
                this.m_name = value;
            }
        }

        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }

        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }

        public bool ShouldSerializeUri() {
            return ((m_uri == null)
                        == false);
        }

        public bool ShouldSerializeMimeType() {
            return ((m_mimeType == null)
                        == false);
        }

        public bool ShouldSerializeBufferView() {
            return ((m_bufferView == null)
                        == false);
        }

        public bool ShouldSerializeName() {
            return ((m_name == null)
                        == false);
        }

        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null)
                        == false);
        }

        public bool ShouldSerializeExtras() {
            return ((m_extras == null)
                        == false);
        }

        public enum MimeTypeEnum {

            [EnumMember(Value="image/jpeg")]
            image_jpeg,

            [EnumMember(Value="image/png")]
            image_png,
        }

        public class ImageConverter : JsonConverter<Image> {

            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(Image) == typeToConvert);
            }

            public override Image Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                Image foo = new Image();
                for (
                ; true;
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "uri")) {
                            foo.Uri = System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options);
                        }
                        if ((propertyName == "mimeType")) {
                            foo.MimeType = System.Enum.Parse<MimeTypeEnum>(System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options));
                        }
                        if ((propertyName == "bufferView")) {
                            foo.BufferView = System.Text.Json.JsonSerializer.Deserialize<System.Nullable<int>>(ref reader, options);
                        }
                        if ((propertyName == "name")) {
                            foo.Name = System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options);
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }

            public override void Write(System.Text.Json.Utf8JsonWriter writer, Image value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                if (value.ShouldSerializeUri()) {
                    writer.WritePropertyName("uri");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Uri, options);
                }
                if (value.ShouldSerializeMimeType()) {
                    writer.WritePropertyName("mimeType");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.MimeType.ToString(), options);
                }
                if (value.ShouldSerializeBufferView()) {
                    writer.WritePropertyName("bufferView");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.BufferView, options);
                }
                if (value.ShouldSerializeName()) {
                    writer.WritePropertyName("name");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Name, options);
                }
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
