//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    
    
    [System.Text.Json.Serialization.JsonConverter(typeof(CameraConverter))]
    public class Camera {
        
        /// <summary>
        /// Backing field for Orthographic.
        /// </summary>
        private CameraOrthographic m_orthographic;
        
        /// <summary>
        /// Backing field for Perspective.
        /// </summary>
        private CameraPerspective m_perspective;
        
        /// <summary>
        /// Backing field for Type.
        /// </summary>
        private TypeEnum m_type;
        
        /// <summary>
        /// Backing field for Name.
        /// </summary>
        private string m_name;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;
        
        /// <summary>
        /// An orthographic camera containing properties to create an orthographic projection matrix. This property **MUST NOT** be defined when `perspective` is defined.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("orthographic")]
        public CameraOrthographic Orthographic {
            get {
                return this.m_orthographic;
            }
            set {
                this.m_orthographic = value;
            }
        }
        
        /// <summary>
        /// A perspective camera containing properties to create a perspective projection matrix. This property **MUST NOT** be defined when `orthographic` is defined.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("perspective")]
        public CameraPerspective Perspective {
            get {
                return this.m_perspective;
            }
            set {
                this.m_perspective = value;
            }
        }
        
        /// <summary>
        /// Specifies if the camera uses a perspective or orthographic projection.
        /// </summary>
        [System.Text.Json.Serialization.JsonConverterAttribute(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public TypeEnum Type {
            get {
                return this.m_type;
            }
            set {
                this.m_type = value;
            }
        }
        
        /// <summary>
        /// The user-defined name of this object.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public string Name {
            get {
                return this.m_name;
            }
            set {
                this.m_name = value;
            }
        }
        
        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }
        
        public bool ShouldSerializeOrthographic() {
            return ((m_orthographic == null) 
                        == false);
        }
        
        public bool ShouldSerializePerspective() {
            return ((m_perspective == null) 
                        == false);
        }
        
        public bool ShouldSerializeName() {
            return ((m_name == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((m_extras == null) 
                        == false);
        }
        
        public enum TypeEnum {
            
            perspective,
            
            orthographic,
        }
        
        public class CameraConverter : JsonConverter<Camera> {
            
            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(Camera) == typeToConvert);
            }
            
            public override Camera Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                Camera foo = new Camera();
                for (
                ; true; 
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "orthographic")) {
                            foo.Orthographic = System.Text.Json.JsonSerializer.Deserialize<CameraOrthographic>(ref reader, options);
                        }
                        if ((propertyName == "perspective")) {
                            foo.Perspective = System.Text.Json.JsonSerializer.Deserialize<CameraPerspective>(ref reader, options);
                        }
                        if ((propertyName == "type")) {
                            foo.Type = System.Enum.Parse<TypeEnum>(System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options));
                        }
                        if ((propertyName == "name")) {
                            foo.Name = System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options);
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }
            
            public override void Write(System.Text.Json.Utf8JsonWriter writer, Camera value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                if (value.ShouldSerializeOrthographic()) {
                    writer.WritePropertyName("orthographic");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Orthographic, options);
                }
                if (value.ShouldSerializePerspective()) {
                    writer.WritePropertyName("perspective");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Perspective, options);
                }
                writer.WritePropertyName("type");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Type.ToString(), options);
                if (value.ShouldSerializeName()) {
                    writer.WritePropertyName("name");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Name, options);
                }
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
