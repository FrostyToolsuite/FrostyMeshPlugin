//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    
    
    [System.Text.Json.Serialization.JsonConverter(typeof(AccessorSparseConverter))]
    public class AccessorSparse {
        
        /// <summary>
        /// Backing field for Count.
        /// </summary>
        private int m_count;
        
        /// <summary>
        /// Backing field for Indices.
        /// </summary>
        private AccessorSparseIndices m_indices;
        
        /// <summary>
        /// Backing field for Values.
        /// </summary>
        private AccessorSparseValues m_values;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;
        
        /// <summary>
        /// Number of deviating accessor values stored in the sparse array.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("count")]
        public int Count {
            get {
                return this.m_count;
            }
            set {
                if ((value < 1)) {
                    throw new System.ArgumentOutOfRangeException("Count", value, "Expected value to be greater than or equal to 1");
                }
                this.m_count = value;
            }
        }
        
        /// <summary>
        /// An object pointing to a buffer view containing the indices of deviating accessor values. The number of indices is equal to `count`. Indices **MUST** strictly increase.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("indices")]
        public AccessorSparseIndices Indices {
            get {
                return this.m_indices;
            }
            set {
                this.m_indices = value;
            }
        }
        
        /// <summary>
        /// An object pointing to a buffer view containing the deviating accessor values.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("values")]
        public AccessorSparseValues Values {
            get {
                return this.m_values;
            }
            set {
                this.m_values = value;
            }
        }
        
        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }
        
        public bool ShouldSerializeIndices() {
            return ((m_indices == null) 
                        == false);
        }
        
        public bool ShouldSerializeValues() {
            return ((m_values == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((m_extras == null) 
                        == false);
        }
        
        public class AccessorSparseConverter : JsonConverter<AccessorSparse> {
            
            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(AccessorSparse) == typeToConvert);
            }
            
            public override AccessorSparse Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                AccessorSparse foo = new AccessorSparse();
                for (
                ; true; 
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "count")) {
                            foo.Count = System.Text.Json.JsonSerializer.Deserialize<int>(ref reader, options);
                        }
                        if ((propertyName == "indices")) {
                            foo.Indices = System.Text.Json.JsonSerializer.Deserialize<AccessorSparseIndices>(ref reader, options);
                        }
                        if ((propertyName == "values")) {
                            foo.Values = System.Text.Json.JsonSerializer.Deserialize<AccessorSparseValues>(ref reader, options);
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }
            
            public override void Write(System.Text.Json.Utf8JsonWriter writer, AccessorSparse value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                writer.WritePropertyName("count");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Count, options);
                writer.WritePropertyName("indices");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Indices, options);
                writer.WritePropertyName("values");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Values, options);
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
