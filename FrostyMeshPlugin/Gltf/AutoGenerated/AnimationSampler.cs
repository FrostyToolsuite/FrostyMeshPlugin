//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    
    
    [System.Text.Json.Serialization.JsonConverter(typeof(AnimationSamplerConverter))]
    public class AnimationSampler {
        
        /// <summary>
        /// Backing field for Input.
        /// </summary>
        private int m_input;
        
        /// <summary>
        /// Backing field for Interpolation.
        /// </summary>
        private InterpolationEnum m_interpolation = InterpolationEnum.LINEAR;
        
        /// <summary>
        /// Backing field for Output.
        /// </summary>
        private int m_output;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;
        
        /// <summary>
        /// The index of an accessor containing keyframe timestamps.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("input")]
        public int Input {
            get {
                return this.m_input;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Input", value, "Expected value to be greater than or equal to 0");
                }
                this.m_input = value;
            }
        }
        
        /// <summary>
        /// Interpolation algorithm.
        /// </summary>
        [System.Text.Json.Serialization.JsonConverterAttribute(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("interpolation")]
        public InterpolationEnum Interpolation {
            get {
                return this.m_interpolation;
            }
            set {
                this.m_interpolation = value;
            }
        }
        
        /// <summary>
        /// The index of an accessor, containing keyframe output values.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("output")]
        public int Output {
            get {
                return this.m_output;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Output", value, "Expected value to be greater than or equal to 0");
                }
                this.m_output = value;
            }
        }
        
        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }
        
        public bool ShouldSerializeInterpolation() {
            return ((m_interpolation == InterpolationEnum.LINEAR) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((m_extras == null) 
                        == false);
        }
        
        public enum InterpolationEnum {
            
            LINEAR,
            
            STEP,
            
            CUBICSPLINE,
        }
        
        public class AnimationSamplerConverter : JsonConverter<AnimationSampler> {
            
            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(AnimationSampler) == typeToConvert);
            }
            
            public override AnimationSampler Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                AnimationSampler foo = new AnimationSampler();
                for (
                ; true; 
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "input")) {
                            foo.Input = System.Text.Json.JsonSerializer.Deserialize<int>(ref reader, options);
                        }
                        if ((propertyName == "interpolation")) {
                            foo.Interpolation = System.Enum.Parse<InterpolationEnum>(System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options));
                        }
                        if ((propertyName == "output")) {
                            foo.Output = System.Text.Json.JsonSerializer.Deserialize<int>(ref reader, options);
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }
            
            public override void Write(System.Text.Json.Utf8JsonWriter writer, AnimationSampler value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                writer.WritePropertyName("input");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Input, options);
                if (value.ShouldSerializeInterpolation()) {
                    writer.WritePropertyName("interpolation");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Interpolation.ToString(), options);
                }
                writer.WritePropertyName("output");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Output, options);
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
