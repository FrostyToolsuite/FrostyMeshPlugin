//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    
    
    [System.Text.Json.Serialization.JsonConverter(typeof(AnimationChannelTargetConverter))]
    public class AnimationChannelTarget {
        
        /// <summary>
        /// Backing field for Node.
        /// </summary>
        private System.Nullable<int> m_node;
        
        /// <summary>
        /// Backing field for Path.
        /// </summary>
        private PathEnum m_path;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;
        
        /// <summary>
        /// The index of the node to animate. When undefined, the animated object **MAY** be defined by an extension.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("node")]
        public System.Nullable<int> Node {
            get {
                return this.m_node;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Node", value, "Expected value to be greater than or equal to 0");
                }
                this.m_node = value;
            }
        }
        
        /// <summary>
        /// The name of the node's TRS property to animate, or the `"weights"` of the Morph Targets it instantiates. For the `"translation"` property, the values that are provided by the sampler are the translation along the X, Y, and Z axes. For the `"rotation"` property, the values are a quaternion in the order (x, y, z, w), where w is the scalar. For the `"scale"` property, the values are the scaling factors along the X, Y, and Z axes.
        /// </summary>
        [System.Text.Json.Serialization.JsonConverterAttribute(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("path")]
        public PathEnum Path {
            get {
                return this.m_path;
            }
            set {
                this.m_path = value;
            }
        }
        
        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }
        
        public bool ShouldSerializeNode() {
            return ((m_node == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((m_extras == null) 
                        == false);
        }
        
        public enum PathEnum {
            
            translation,
            
            rotation,
            
            scale,
            
            weights,
        }
        
        public class AnimationChannelTargetConverter : JsonConverter<AnimationChannelTarget> {
            
            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(AnimationChannelTarget) == typeToConvert);
            }
            
            public override AnimationChannelTarget Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                AnimationChannelTarget foo = new AnimationChannelTarget();
                for (
                ; true; 
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "node")) {
                            foo.Node = System.Text.Json.JsonSerializer.Deserialize<System.Nullable<int>>(ref reader, options);
                        }
                        if ((propertyName == "path")) {
                            foo.Path = System.Enum.Parse<PathEnum>(System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options));
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }
            
            public override void Write(System.Text.Json.Utf8JsonWriter writer, AnimationChannelTarget value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                if (value.ShouldSerializeNode()) {
                    writer.WritePropertyName("node");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Node, options);
                }
                writer.WritePropertyName("path");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Path.ToString(), options);
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
