//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    
    
    [System.Text.Json.Serialization.JsonConverter(typeof(AnimationChannelConverter))]
    public class AnimationChannel {
        
        /// <summary>
        /// Backing field for Sampler.
        /// </summary>
        private int m_sampler;
        
        /// <summary>
        /// Backing field for Target.
        /// </summary>
        private AnimationChannelTarget m_target;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;
        
        /// <summary>
        /// The index of a sampler in this animation used to compute the value for the target.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sampler")]
        public int Sampler {
            get {
                return this.m_sampler;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("Sampler", value, "Expected value to be greater than or equal to 0");
                }
                this.m_sampler = value;
            }
        }
        
        /// <summary>
        /// The descriptor of the animated property.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("target")]
        public AnimationChannelTarget Target {
            get {
                return this.m_target;
            }
            set {
                this.m_target = value;
            }
        }
        
        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }
        
        public bool ShouldSerializeTarget() {
            return ((m_target == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((m_extras == null) 
                        == false);
        }
        
        public class AnimationChannelConverter : JsonConverter<AnimationChannel> {
            
            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(AnimationChannel) == typeToConvert);
            }
            
            public override AnimationChannel Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                AnimationChannel foo = new AnimationChannel();
                for (
                ; true; 
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "sampler")) {
                            foo.Sampler = System.Text.Json.JsonSerializer.Deserialize<int>(ref reader, options);
                        }
                        if ((propertyName == "target")) {
                            foo.Target = System.Text.Json.JsonSerializer.Deserialize<AnimationChannelTarget>(ref reader, options);
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }
            
            public override void Write(System.Text.Json.Utf8JsonWriter writer, AnimationChannel value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                writer.WritePropertyName("sampler");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Sampler, options);
                writer.WritePropertyName("target");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Target, options);
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
