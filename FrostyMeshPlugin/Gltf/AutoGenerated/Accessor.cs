//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    
    
    [System.Text.Json.Serialization.JsonConverter(typeof(AccessorConverter))]
    public class Accessor {
        
        /// <summary>
        /// Backing field for BufferView.
        /// </summary>
        private System.Nullable<int> m_bufferView;
        
        /// <summary>
        /// Backing field for ByteOffset.
        /// </summary>
        private int m_byteOffset = 0;
        
        /// <summary>
        /// Backing field for ComponentType.
        /// </summary>
        private ComponentTypeEnum m_componentType;
        
        /// <summary>
        /// Backing field for Normalized.
        /// </summary>
        private bool m_normalized = false;
        
        /// <summary>
        /// Backing field for Count.
        /// </summary>
        private int m_count;
        
        /// <summary>
        /// Backing field for Type.
        /// </summary>
        private TypeEnum m_type;
        
        /// <summary>
        /// Backing field for Max.
        /// </summary>
        private System.Collections.Generic.List<float> m_max;
        
        /// <summary>
        /// Backing field for Min.
        /// </summary>
        private System.Collections.Generic.List<float> m_min;
        
        /// <summary>
        /// Backing field for Sparse.
        /// </summary>
        private AccessorSparse m_sparse;
        
        /// <summary>
        /// Backing field for Name.
        /// </summary>
        private string m_name;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;
        
        /// <summary>
        /// The index of the bufferView.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("bufferView")]
        public System.Nullable<int> BufferView {
            get {
                return this.m_bufferView;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("BufferView", value, "Expected value to be greater than or equal to 0");
                }
                this.m_bufferView = value;
            }
        }
        
        /// <summary>
        /// The offset relative to the start of the buffer view in bytes.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("byteOffset")]
        public int ByteOffset {
            get {
                return this.m_byteOffset;
            }
            set {
                if ((value < 0)) {
                    throw new System.ArgumentOutOfRangeException("ByteOffset", value, "Expected value to be greater than or equal to 0");
                }
                this.m_byteOffset = value;
            }
        }
        
        /// <summary>
        /// The datatype of the accessor's components.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("componentType")]
        public ComponentTypeEnum ComponentType {
            get {
                return this.m_componentType;
            }
            set {
                this.m_componentType = value;
            }
        }
        
        /// <summary>
        /// Specifies whether integer data values are normalized before usage.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("normalized")]
        public bool Normalized {
            get {
                return this.m_normalized;
            }
            set {
                this.m_normalized = value;
            }
        }
        
        /// <summary>
        /// The number of elements referenced by this accessor.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("count")]
        public int Count {
            get {
                return this.m_count;
            }
            set {
                if ((value < 1)) {
                    throw new System.ArgumentOutOfRangeException("Count", value, "Expected value to be greater than or equal to 1");
                }
                this.m_count = value;
            }
        }
        
        /// <summary>
        /// Specifies if the accessor's elements are scalars, vectors, or matrices.
        /// </summary>
        [System.Text.Json.Serialization.JsonConverterAttribute(typeof(System.Text.Json.Serialization.JsonStringEnumConverter))]
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("type")]
        public TypeEnum Type {
            get {
                return this.m_type;
            }
            set {
                this.m_type = value;
            }
        }
        
        /// <summary>
        /// Maximum value of each component in this accessor.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("max")]
        public System.Collections.Generic.List<float> Max {
            get {
                return this.m_max;
            }
            set {
                if ((value == null)) {
                    this.m_max = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                if ((value.Count > 16u)) {
                    throw new System.ArgumentException("Array too long");
                }
                this.m_max = value;
            }
        }
        
        /// <summary>
        /// Minimum value of each component in this accessor.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("min")]
        public System.Collections.Generic.List<float> Min {
            get {
                return this.m_min;
            }
            set {
                if ((value == null)) {
                    this.m_min = value;
                    return;
                }
                if ((value.Count < 1u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                if ((value.Count > 16u)) {
                    throw new System.ArgumentException("Array too long");
                }
                this.m_min = value;
            }
        }
        
        /// <summary>
        /// Sparse storage of elements that deviate from their initialization value.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("sparse")]
        public AccessorSparse Sparse {
            get {
                return this.m_sparse;
            }
            set {
                this.m_sparse = value;
            }
        }
        
        /// <summary>
        /// The user-defined name of this object.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("name")]
        public string Name {
            get {
                return this.m_name;
            }
            set {
                this.m_name = value;
            }
        }
        
        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }
        
        public bool ShouldSerializeBufferView() {
            return ((m_bufferView == null) 
                        == false);
        }
        
        public bool ShouldSerializeByteOffset() {
            return ((m_byteOffset == 0) 
                        == false);
        }
        
        public bool ShouldSerializeNormalized() {
            return ((m_normalized == false) 
                        == false);
        }
        
        public bool ShouldSerializeMax() {
            return ((m_max == null) 
                        == false);
        }
        
        public bool ShouldSerializeMin() {
            return ((m_min == null) 
                        == false);
        }
        
        public bool ShouldSerializeSparse() {
            return ((m_sparse == null) 
                        == false);
        }
        
        public bool ShouldSerializeName() {
            return ((m_name == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((m_extras == null) 
                        == false);
        }
        
        public enum ComponentTypeEnum {
            
            BYTE = 5120,
            
            UNSIGNED_BYTE = 5121,
            
            SHORT = 5122,
            
            UNSIGNED_SHORT = 5123,
            
            UNSIGNED_INT = 5125,
            
            FLOAT = 5126,
        }
        
        public enum TypeEnum {
            
            SCALAR,
            
            VEC2,
            
            VEC3,
            
            VEC4,
            
            MAT2,
            
            MAT3,
            
            MAT4,
        }
        
        public class AccessorConverter : JsonConverter<Accessor> {
            
            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(Accessor) == typeToConvert);
            }
            
            public override Accessor Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                Accessor foo = new Accessor();
                for (
                ; true; 
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "bufferView")) {
                            foo.BufferView = System.Text.Json.JsonSerializer.Deserialize<System.Nullable<int>>(ref reader, options);
                        }
                        if ((propertyName == "byteOffset")) {
                            foo.ByteOffset = System.Text.Json.JsonSerializer.Deserialize<int>(ref reader, options);
                        }
                        if ((propertyName == "componentType")) {
                            foo.ComponentType = System.Text.Json.JsonSerializer.Deserialize<ComponentTypeEnum>(ref reader, options);
                        }
                        if ((propertyName == "normalized")) {
                            foo.Normalized = System.Text.Json.JsonSerializer.Deserialize<bool>(ref reader, options);
                        }
                        if ((propertyName == "count")) {
                            foo.Count = System.Text.Json.JsonSerializer.Deserialize<int>(ref reader, options);
                        }
                        if ((propertyName == "type")) {
                            foo.Type = System.Enum.Parse<TypeEnum>(System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options));
                        }
                        if ((propertyName == "max")) {
                            foo.Max = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.List<float>>(ref reader, options);
                        }
                        if ((propertyName == "min")) {
                            foo.Min = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.List<float>>(ref reader, options);
                        }
                        if ((propertyName == "sparse")) {
                            foo.Sparse = System.Text.Json.JsonSerializer.Deserialize<AccessorSparse>(ref reader, options);
                        }
                        if ((propertyName == "name")) {
                            foo.Name = System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options);
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }
            
            public override void Write(System.Text.Json.Utf8JsonWriter writer, Accessor value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                if (value.ShouldSerializeBufferView()) {
                    writer.WritePropertyName("bufferView");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.BufferView, options);
                }
                if (value.ShouldSerializeByteOffset()) {
                    writer.WritePropertyName("byteOffset");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.ByteOffset, options);
                }
                writer.WritePropertyName("componentType");
                System.Text.Json.JsonSerializer.Serialize(writer, value.ComponentType, options);
                if (value.ShouldSerializeNormalized()) {
                    writer.WritePropertyName("normalized");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Normalized, options);
                }
                writer.WritePropertyName("count");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Count, options);
                writer.WritePropertyName("type");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Type.ToString(), options);
                if (value.ShouldSerializeMax()) {
                    writer.WritePropertyName("max");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Max, options);
                }
                if (value.ShouldSerializeMin()) {
                    writer.WritePropertyName("min");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Min, options);
                }
                if (value.ShouldSerializeSparse()) {
                    writer.WritePropertyName("sparse");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Sparse, options);
                }
                if (value.ShouldSerializeName()) {
                    writer.WritePropertyName("name");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Name, options);
                }
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
