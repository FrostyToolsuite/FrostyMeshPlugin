//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    
    
    [System.Text.Json.Serialization.JsonConverter(typeof(MaterialPbrMetallicRoughnessConverter))]
    public class MaterialPbrMetallicRoughness {
        
        /// <summary>
        /// Backing field for BaseColorFactor.
        /// </summary>
        private System.Collections.Generic.List<float> m_baseColorFactor = new System.Collections.Generic.List<float>(new float[] {
                    1F,
                    1F,
                    1F,
                    1F});
        
        /// <summary>
        /// Backing field for BaseColorTexture.
        /// </summary>
        private TextureInfo m_baseColorTexture;
        
        /// <summary>
        /// Backing field for MetallicFactor.
        /// </summary>
        private float m_metallicFactor = 1F;
        
        /// <summary>
        /// Backing field for RoughnessFactor.
        /// </summary>
        private float m_roughnessFactor = 1F;
        
        /// <summary>
        /// Backing field for MetallicRoughnessTexture.
        /// </summary>
        private TextureInfo m_metallicRoughnessTexture;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;
        
        /// <summary>
        /// The factors for the base color of the material.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("baseColorFactor")]
        public System.Collections.Generic.List<float> BaseColorFactor {
            get {
                return this.m_baseColorFactor;
            }
            set {
                if ((value.Count < 4u)) {
                    throw new System.ArgumentException("List not long enough");
                }
                if ((value.Count > 4u)) {
                    throw new System.ArgumentException("Array too long");
                }
                int index = 0;
                for (index = 0; (index < value.Count); index = (index + 1)) {
                    if ((value[index] < 0D)) {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                for (index = 0; (index < value.Count); index = (index + 1)) {
                    if ((value[index] > 1D)) {
                        throw new System.ArgumentOutOfRangeException();
                    }
                }
                this.m_baseColorFactor = value;
            }
        }
        
        /// <summary>
        /// The base color texture.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("baseColorTexture")]
        public TextureInfo BaseColorTexture {
            get {
                return this.m_baseColorTexture;
            }
            set {
                this.m_baseColorTexture = value;
            }
        }
        
        /// <summary>
        /// The factor for the metalness of the material.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("metallicFactor")]
        public float MetallicFactor {
            get {
                return this.m_metallicFactor;
            }
            set {
                if ((value < 0D)) {
                    throw new System.ArgumentOutOfRangeException("MetallicFactor", value, "Expected value to be greater than or equal to 0");
                }
                if ((value > 1D)) {
                    throw new System.ArgumentOutOfRangeException("MetallicFactor", value, "Expected value to be less than or equal to 1");
                }
                this.m_metallicFactor = value;
            }
        }
        
        /// <summary>
        /// The factor for the roughness of the material.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("roughnessFactor")]
        public float RoughnessFactor {
            get {
                return this.m_roughnessFactor;
            }
            set {
                if ((value < 0D)) {
                    throw new System.ArgumentOutOfRangeException("RoughnessFactor", value, "Expected value to be greater than or equal to 0");
                }
                if ((value > 1D)) {
                    throw new System.ArgumentOutOfRangeException("RoughnessFactor", value, "Expected value to be less than or equal to 1");
                }
                this.m_roughnessFactor = value;
            }
        }
        
        /// <summary>
        /// The metallic-roughness texture.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("metallicRoughnessTexture")]
        public TextureInfo MetallicRoughnessTexture {
            get {
                return this.m_metallicRoughnessTexture;
            }
            set {
                this.m_metallicRoughnessTexture = value;
            }
        }
        
        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }
        
        public bool ShouldSerializeBaseColorFactor() {
            return (m_baseColorFactor.SequenceEqual(new System.Collections.Generic.List<float>(new float[] {
                            1F,
                            1F,
                            1F,
                            1F})) == false);
        }
        
        public bool ShouldSerializeBaseColorTexture() {
            return ((m_baseColorTexture == null) 
                        == false);
        }
        
        public bool ShouldSerializeMetallicFactor() {
            return ((m_metallicFactor == 1F) 
                        == false);
        }
        
        public bool ShouldSerializeRoughnessFactor() {
            return ((m_roughnessFactor == 1F) 
                        == false);
        }
        
        public bool ShouldSerializeMetallicRoughnessTexture() {
            return ((m_metallicRoughnessTexture == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((m_extras == null) 
                        == false);
        }
        
        public class MaterialPbrMetallicRoughnessConverter : JsonConverter<MaterialPbrMetallicRoughness> {
            
            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(MaterialPbrMetallicRoughness) == typeToConvert);
            }
            
            public override MaterialPbrMetallicRoughness Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                MaterialPbrMetallicRoughness foo = new MaterialPbrMetallicRoughness();
                for (
                ; true; 
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "baseColorFactor")) {
                            foo.BaseColorFactor = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.List<float>>(ref reader, options);
                        }
                        if ((propertyName == "baseColorTexture")) {
                            foo.BaseColorTexture = System.Text.Json.JsonSerializer.Deserialize<TextureInfo>(ref reader, options);
                        }
                        if ((propertyName == "metallicFactor")) {
                            foo.MetallicFactor = System.Text.Json.JsonSerializer.Deserialize<float>(ref reader, options);
                        }
                        if ((propertyName == "roughnessFactor")) {
                            foo.RoughnessFactor = System.Text.Json.JsonSerializer.Deserialize<float>(ref reader, options);
                        }
                        if ((propertyName == "metallicRoughnessTexture")) {
                            foo.MetallicRoughnessTexture = System.Text.Json.JsonSerializer.Deserialize<TextureInfo>(ref reader, options);
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }
            
            public override void Write(System.Text.Json.Utf8JsonWriter writer, MaterialPbrMetallicRoughness value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                if (value.ShouldSerializeBaseColorFactor()) {
                    writer.WritePropertyName("baseColorFactor");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.BaseColorFactor, options);
                }
                if (value.ShouldSerializeBaseColorTexture()) {
                    writer.WritePropertyName("baseColorTexture");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.BaseColorTexture, options);
                }
                if (value.ShouldSerializeMetallicFactor()) {
                    writer.WritePropertyName("metallicFactor");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.MetallicFactor, options);
                }
                if (value.ShouldSerializeRoughnessFactor()) {
                    writer.WritePropertyName("roughnessFactor");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.RoughnessFactor, options);
                }
                if (value.ShouldSerializeMetallicRoughnessTexture()) {
                    writer.WritePropertyName("metallicRoughnessTexture");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.MetallicRoughnessTexture, options);
                }
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
