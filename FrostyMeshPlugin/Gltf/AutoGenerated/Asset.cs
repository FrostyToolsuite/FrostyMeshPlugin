//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace FrostyMeshPlugin.Gltf.AutoGenerated {
    using System.Linq;
    using System.Runtime.Serialization;
    using System.Text.Json;
    using System.Text.Json.Serialization;
    
    
    [System.Text.Json.Serialization.JsonConverter(typeof(AssetConverter))]
    public class Asset {
        
        /// <summary>
        /// Backing field for Copyright.
        /// </summary>
        private string m_copyright;
        
        /// <summary>
        /// Backing field for Generator.
        /// </summary>
        private string m_generator;
        
        /// <summary>
        /// Backing field for Version.
        /// </summary>
        private string m_version;
        
        /// <summary>
        /// Backing field for MinVersion.
        /// </summary>
        private string m_minVersion;
        
        /// <summary>
        /// Backing field for Extensions.
        /// </summary>
        private System.Collections.Generic.Dictionary<string, object> m_extensions;
        
        /// <summary>
        /// Backing field for Extras.
        /// </summary>
        private Extras m_extras;
        
        /// <summary>
        /// A copyright message suitable for display to credit the content creator.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("copyright")]
        public string Copyright {
            get {
                return this.m_copyright;
            }
            set {
                this.m_copyright = value;
            }
        }
        
        /// <summary>
        /// Tool that generated this glTF model.  Useful for debugging.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("generator")]
        public string Generator {
            get {
                return this.m_generator;
            }
            set {
                this.m_generator = value;
            }
        }
        
        /// <summary>
        /// The glTF version in the form of `<major>.<minor>` that this asset targets.
        /// </summary>
        [System.Text.Json.Serialization.JsonRequiredAttribute()]
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("version")]
        public string Version {
            get {
                return this.m_version;
            }
            set {
                this.m_version = value;
            }
        }
        
        /// <summary>
        /// The minimum glTF version in the form of `<major>.<minor>` that this asset targets. This property **MUST NOT** be greater than the asset version.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("minVersion")]
        public string MinVersion {
            get {
                return this.m_minVersion;
            }
            set {
                this.m_minVersion = value;
            }
        }
        
        /// <summary>
        /// JSON object with extension-specific objects.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extensions")]
        public System.Collections.Generic.Dictionary<string, object> Extensions {
            get {
                return this.m_extensions;
            }
            set {
                this.m_extensions = value;
            }
        }
        
        /// <summary>
        /// Application-specific data.
        /// </summary>
        [System.Text.Json.Serialization.JsonPropertyNameAttribute("extras")]
        public Extras Extras {
            get {
                return this.m_extras;
            }
            set {
                this.m_extras = value;
            }
        }
        
        public bool ShouldSerializeCopyright() {
            return ((m_copyright == null) 
                        == false);
        }
        
        public bool ShouldSerializeGenerator() {
            return ((m_generator == null) 
                        == false);
        }
        
        public bool ShouldSerializeVersion() {
            return ((m_version == null) 
                        == false);
        }
        
        public bool ShouldSerializeMinVersion() {
            return ((m_minVersion == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtensions() {
            return ((m_extensions == null) 
                        == false);
        }
        
        public bool ShouldSerializeExtras() {
            return ((m_extras == null) 
                        == false);
        }
        
        public class AssetConverter : JsonConverter<Asset> {
            
            public override bool CanConvert(System.Type typeToConvert) {
                return (typeof(Asset) == typeToConvert);
            }
            
            public override Asset Read(ref Utf8JsonReader reader, System.Type typeToConvert, System.Text.Json.JsonSerializerOptions options) {
                if ((reader.TokenType != JsonTokenType.StartObject)) {
                    throw new JsonException();
                }
                Asset foo = new Asset();
                for (
                ; true; 
                ) {
                    if ((reader.Read() == false)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.EndObject)) {
break;
                    }
                    if ((reader.TokenType == JsonTokenType.PropertyName)) {
                        string propertyName = reader.GetString();
                        reader.Read();
                        if ((propertyName == "copyright")) {
                            foo.Copyright = System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options);
                        }
                        if ((propertyName == "generator")) {
                            foo.Generator = System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options);
                        }
                        if ((propertyName == "version")) {
                            foo.Version = System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options);
                        }
                        if ((propertyName == "minVersion")) {
                            foo.MinVersion = System.Text.Json.JsonSerializer.Deserialize<string>(ref reader, options);
                        }
                        if ((propertyName == "extensions")) {
                            foo.Extensions = System.Text.Json.JsonSerializer.Deserialize<System.Collections.Generic.Dictionary<string, object>>(ref reader, options);
                        }
                        if ((propertyName == "extras")) {
                            foo.Extras = System.Text.Json.JsonSerializer.Deserialize<Extras>(ref reader, options);
                        }
                    }
                }
                return foo;
            }
            
            public override void Write(System.Text.Json.Utf8JsonWriter writer, Asset value, System.Text.Json.JsonSerializerOptions options) {
                writer.WriteStartObject();
                if (value.ShouldSerializeCopyright()) {
                    writer.WritePropertyName("copyright");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Copyright, options);
                }
                if (value.ShouldSerializeGenerator()) {
                    writer.WritePropertyName("generator");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Generator, options);
                }
                writer.WritePropertyName("version");
                System.Text.Json.JsonSerializer.Serialize(writer, value.Version, options);
                if (value.ShouldSerializeMinVersion()) {
                    writer.WritePropertyName("minVersion");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.MinVersion, options);
                }
                if (value.ShouldSerializeExtensions()) {
                    writer.WritePropertyName("extensions");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extensions, options);
                }
                if (value.ShouldSerializeExtras()) {
                    writer.WritePropertyName("extras");
                    System.Text.Json.JsonSerializer.Serialize(writer, value.Extras, options);
                }
                writer.WriteEndObject();
            }
        }
    }
}
